{"ast":null,"code":"import _classCallCheck from \"/Users/JLDwyer/working/ClickGame/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/JLDwyer/working/ClickGame/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/JLDwyer/working/ClickGame/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/JLDwyer/working/ClickGame/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/JLDwyer/working/ClickGame/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/JLDwyer/working/ClickGame/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      friends: friends,\n      topscore: 0,\n      score: 0\n    };\n\n    _this.win = function () {\n      if (_this.state.score === 12) {\n        alert(\"WELL DONE!\");\n        restart();\n      }\n    };\n\n    _this.restart = function () {\n      if (_this.state.score > _this.state.topscore) {\n        _this.setState({\n          topscore: _this.state.score\n        });\n\n        _this.state.friends.forEach(function (friend) {\n          friend.clicked = false;\n        });\n\n        alert(\"you lose\");\n\n        _this.setState({\n          score: 0\n        });\n\n        return true;\n      }\n    };\n\n    _this.shuffleFriend = function (id) {\n      _this.state.friends.find(function (clicked, i) {\n        if (clicked.id === id) {\n          if (friends[i].clicked === false) {\n            //this code iterates through all the friend objects\n            friends[i].clicked = true;\n\n            _this.setState({\n              friends: friends,\n              score: _this.state.score + 1\n            });\n\n            friends.sort(function () {\n              return Math.random() - 0.5;\n            });\n            return true;\n          } else {\n            _this.restart();\n          }\n        }\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    // Map over this.state.friends and render a FriendCard component for each friend object\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Wrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(Title, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, \"Score: \", this.state.score, \" Top Score: \", this.state.topscore, \" \"), this.state.friends.map(function (friend) {\n        return React.createElement(FriendCard, {\n          shuffleFriend: _this2.shuffleFriend,\n          id: friend.id,\n          key: friend.id,\n          name: friend.name,\n          image: friend.image,\n          occupation: friend.occupation,\n          location: friend.location,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59\n          },\n          __self: this\n        });\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/JLDwyer/working/ClickGame/client/src/App.js"],"names":["React","Component","FriendCard","Wrapper","Title","friends","App","state","topscore","score","win","alert","restart","setState","forEach","friend","clicked","shuffleFriend","id","find","i","sort","Math","random","map","name","image","occupation","location"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,OAAP,MAAoB,gBAApB;;IAEMC,G;;;;;;;;;;;;;;;;;UAEJC,K,GAAQ;AACNF,MAAAA,OAAO,EAAPA,OADM;AAENG,MAAAA,QAAQ,EAAE,CAFJ;AAGNC,MAAAA,KAAK,EAAE;AAHD,K;;UAMRC,G,GAAM,YAAM;AACV,UAAI,MAAKH,KAAL,CAAWE,KAAX,KAAqB,EAAzB,EAA4B;AAC1BE,QAAAA,KAAK,CAAC,YAAD,CAAL;AACAC,QAAAA,OAAO;AACR;AACF,K;;UAEDA,O,GAAU,YAAM;AACd,UAAI,MAAKL,KAAL,CAAWE,KAAX,GAAmB,MAAKF,KAAL,CAAWC,QAAlC,EAA4C;AAC1C,cAAKK,QAAL,CAAc;AAAEL,UAAAA,QAAQ,EAAE,MAAKD,KAAL,CAAWE;AAAvB,SAAd;;AACA,cAAKF,KAAL,CAAWF,OAAX,CAAmBS,OAAnB,CAA2B,UAAAC,MAAM,EAAI;AACnCA,UAAAA,MAAM,CAACC,OAAP,GAAiB,KAAjB;AACD,SAFD;;AAGAL,QAAAA,KAAK,CAAC,UAAD,CAAL;;AACA,cAAKE,QAAL,CAAc;AAAEJ,UAAAA,KAAK,EAAE;AAAT,SAAd;;AACA,eAAO,IAAP;AACD;AACF,K;;UAEDQ,a,GAAgB,UAAAC,EAAE,EAAI;AACpB,YAAKX,KAAL,CAAWF,OAAX,CAAmBc,IAAnB,CAAwB,UAACH,OAAD,EAAUI,CAAV,EAAgB;AACtC,YAAIJ,OAAO,CAACE,EAAR,KAAeA,EAAnB,EAAuB;AACrB,cAAIb,OAAO,CAACe,CAAD,CAAP,CAAWJ,OAAX,KAAuB,KAA3B,EAAkC;AAChC;AACAX,YAAAA,OAAO,CAACe,CAAD,CAAP,CAAWJ,OAAX,GAAqB,IAArB;;AACA,kBAAKH,QAAL,CAAc;AAAER,cAAAA,OAAO,EAAPA,OAAF;AAAWI,cAAAA,KAAK,EAAE,MAAKF,KAAL,CAAWE,KAAX,GAAmB;AAArC,aAAd;;AACAJ,YAAAA,OAAO,CAACgB,IAAR,CAAa;AAAA,qBAAMC,IAAI,CAACC,MAAL,KAAgB,GAAtB;AAAA,aAAb;AACA,mBAAO,IAAP;AACD,WAND,MAOK;AACH,kBAAKX,OAAL;AACD;AACF;AACF,OAbD;AAcD,K;;;;;;;AAID;6BACS;AAAA;;AACP,aACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAe,KAAKL,KAAL,CAAWE,KAA1B,kBAA6C,KAAKF,KAAL,CAAWC,QAAxD,MADF,EAEG,KAAKD,KAAL,CAAWF,OAAX,CAAmBmB,GAAnB,CAAuB,UAAAT,MAAM;AAAA,eAC5B,oBAAC,UAAD;AACE,UAAA,aAAa,EAAE,MAAI,CAACE,aADtB;AAEE,UAAA,EAAE,EAAEF,MAAM,CAACG,EAFb;AAGE,UAAA,GAAG,EAAEH,MAAM,CAACG,EAHd;AAIE,UAAA,IAAI,EAAEH,MAAM,CAACU,IAJf;AAKE,UAAA,KAAK,EAAEV,MAAM,CAACW,KALhB;AAME,UAAA,UAAU,EAAEX,MAAM,CAACY,UANrB;AAOE,UAAA,QAAQ,EAAEZ,MAAM,CAACa,QAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAD4B;AAAA,OAA7B,CAFH,CADF;AAgBD;;;;EAhEe3B,S;;AAmElB,eAAeK,GAAf","sourcesContent":["import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport friends from \"./friends.json\";\n\nclass App extends Component {\n  // Setting this.state.friends to the friends json array\n  state = {\n    friends,\n    topscore: 0,\n    score: 0\n  };\n\n  win = () => {\n    if (this.state.score === 12){\n      alert(\"WELL DONE!\")\n      restart();\n    }\n  }\n\n  restart = () => {\n    if (this.state.score > this.state.topscore) {\n      this.setState({ topscore: this.state.score });\n      this.state.friends.forEach(friend => {\n        friend.clicked = false;\n      });\n      alert(\"you lose\");\n      this.setState({ score: 0 });\n      return true;\n    }\n  }\n\n  shuffleFriend = id => {\n    this.state.friends.find((clicked, i) => {\n      if (clicked.id === id) {\n        if (friends[i].clicked === false) {\n          //this code iterates through all the friend objects\n          friends[i].clicked = true;\n          this.setState({ friends, score: this.state.score + 1 });\n          friends.sort(() => Math.random() - 0.5);\n          return true;\n        }\n        else {\n          this.restart();\n        }\n      }\n    })\n  }\n\n\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <Wrapper>\n        <Title>Score: {this.state.score} Top Score: {this.state.topscore} </Title>\n        {this.state.friends.map(friend => (\n          <FriendCard\n            shuffleFriend={this.shuffleFriend}\n            id={friend.id}\n            key={friend.id}\n            name={friend.name}\n            image={friend.image}\n            occupation={friend.occupation}\n            location={friend.location}\n          />\n        ))}\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}